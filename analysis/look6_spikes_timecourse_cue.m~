% Prepare each figure

num_fig = [1];
file_name_ext = '1';

%%  Calculate few variables, done only once for all figures

% Save memory angle
temp1 = S.esetup_memory_coord;
[th,radiusdeg] = cart2pol(temp1(:,1), temp1(:,2));
theta = (th*180)/pi;
S.memory_angle = theta;

%=====================
% Initialize a few variables
task_names_used = unique(S.esetup_block_cond);
orientations_used = unique(S.esetup_background_texture_line_angle(:,1));
texture_on_used = [1,0];
memory_angles_used = unique(S.memory_angle);


%% Figures calculations

for fig1 = 1:numel(num_fig) % Plot figures
    
    settings.figure_current = num_fig(fig1);
    fprintf('\nPreparing figure %s out of %s total for this analysis\n', num2str(fig1), num2str(numel(num_fig))  )
        
    % Over-write spike rates?
    if fig1==1
        new_mat = 1;
    else
        new_mat = 0;
    end
    
    % Try to load the data for given analysis
    temp1 = sprintf('_%s_%.mat', settings.neuron_name, file_name_ext);
    [path1, path1_short, file_name] = get_generate_path_v10(settings, 'figures', temp1, settings.session_current);
    if isfile (path1)
        fprintf ('Skippind data binning and loading "%s"\n', file_name)
        data_mat = get_struct_v11(path1);
        mat1_ini = data_mat.mat1_ini;
        mat1_plot_bins_start = data_mat.mat1_plot_bins_start;
        mat1_plot_bins_end = data_mat.mat1_plot_bins_end;
        mat2_ini = data_mat.mat2_ini; % Get long (summary) bins
        clear data_mat;
    end
    
    % Time relative to which spikes are calculated
    S.tconst = S.memory_on - S.first_display;

    %===============
    % Select appropriate time interval for spike binning
    if new_mat == 1

        d1 = struct;

        %================
        % mat1_ini
        % Create a matrix with plot_bins
        int_bins = settings.intervalbins_mem;
        bin_length = settings.bin_length_short;
        
        % Remove bins after 75% percentile of memory delay
        a = prctile(S.esetup_memory_delay*1000, 75);
        int_bins(int_bins + bin_length > a) = [];
        
        % plot_bins
        settings.mat1_plot_bins=int_bins+bin_length/2;
        
        % Recorded trial duration
        t_dur = (S.edata_fixation_off - S.edata_memory_on) * 1000;
        
        look6_helper_int_bins_calculator;
        
        % Spikes and events
        t1_spike = spikes1.ts; % Initialize spike timing
        t1_evt = events_mat.msg_1; % Get timing of the events
        t1_evt = t1_evt + S.tconst; % Reset to time relative to tconst
        
        % Calculate spiking rates
        mat1_ini = look6_helper_spike_binning(t1_spike, t1_evt, plot_bins_start, plot_bins_end);
        
        % Save data
        d1.mat1_ini = mat1_ini;
        d1.mat1_plot_bins_start = plot_bins_start;
        d1.mat1_plot_bins_end = plot_bins_end;
        d1.mat1_plot_bins = settings.plot_bins;
        

        
%         %==================
%         % Calculate long time bins
%         
%         plot_bins_start2 = NaN(numel(t_dur), 1); % Output matrix
%         plot_bins_end2 = NaN(numel(t_dur), 1); % Output matrix
%         
%         plot_bins_start2(:,1) = 500;
%         plot_bins_end2(:,1) = t_dur;
%         
%         %====================
%         % Calculate bins for orientation selectivity
%         if isfield (S, 'edata_background_texture_onset_time') & size(S.edata_background_texture_onset_time, 2) == 1
%             t_dur = (S.edata_fixation_off - S.edata_memory_on) * 1000;
%         else
%             index = ~isnan(S.edata_background_texture_onset_time(:,2));
%             t_dur(index) = (S.edata_background_texture_onset_time(index,2) - S.edata_memory_on(index,1)) * 1000;
%             index = isnan(S.edata_background_texture_onset_time(:,2));
%             t_dur(index) = (S.edata_fixation_off(index,1) - S.edata_memory_on(index,1)) * 1000;
% %         else
% %             t_dur = (S.edata_fixation_off - S.edata_memory_on) * 1000;
%         end
      
    end
    
    %============
    % Find spikes
    
    if new_mat==1 % This decides whether to over_write the calculated data matrix
        
% %         % Calculate long time bin rates
% %         mat2_ini = look6_helper_spike_binning(t1_spike, t1_evt, plot_bins_start2, plot_bins_end2);
        

        
%         d1.mat2_ini = mat2_ini;
%         d1.mat2_plot_bins_start = plot_bins_start2;
%         d1.mat2_plot_bins_end = plot_bins_end2;
%         
%         d1.mat3_ini = mat3_ini;
%         d1.mat3_plot_bins_start = plot_bins_start3;
%         d1.mat3_plot_bins_end = plot_bins_end3;
%         save (path1, 'd1')
%         clear d1;
%         fprintf ('Saved binned data as new file "%s"\n', file_name)
%         
    end
    
    
    %% Plot data

    
    if settings.figure_current==7
        
        look6_spikes_timecourse_cue_stats;
        
    end
    
    
end
% End of plotting each figure